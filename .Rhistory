geom_point(size=residuals)
View(display_df)
library(ggplot2)
ggplot(display_df, aes(x=airq.Temp, y=airq.Wind)) +
geom_point(size=pred_table.residuals)
View(display_df)
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=airq.Temp, y=airq.Wind)) +
geom_point(size=pred_table.residuals)
View(display_df)
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=residuals)
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$residuals)
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=ozone, color = display_df$residuals)
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$ozone, color = display_df$residuals)
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$ozone, color = abs(display_df$residuals))
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$ozone / 100, color = abs(display_df$residuals))
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$ozone / 10, color = abs(display_df$residuals))
install.packages("e1071")
library(e1071)
?svm
s_out <- svm(airq$Ozone ~ ., data = airq)
summary(s_out)
pred_s <- fitted(s_out)
s_var <- subset(airq, select = -airq$Ozone)
s_y <- airq$Ozone
pred_s <- predict(s_out, s_var)
attach(airq)
s_var <- subset(airq, select = -airq$Ozone)
s_y <- airq$Ozone
pred_s <- predict(s_out, s_var)
table(pred_s, s_var)
pred_s
length(pred_s)
length(s_var)
View(s_var)
View(s_var)
table(pred_s, s_y)
View(airq)
pred_table_sv <- data.frame(airq[,1], pred_s[,1])
pred_table_sv <- data.frame(airq[,1], pred_s)
str(pred_table_sv)
summary(pred_table_sv)
View(pred_table_sv)
row_n <- c("ozone", "prediction")
name(pred_table_sv) <- row_n
row_n <- c("ozone", "prediction")
names(pred_table_sv) <- row_n
View(pred_table_sv)
pred_table_sv$residuals <- (pred_table_sv$ozone - pred_table_sv$prediction)
summary(pred_table_sv)
rmse(pred_table_sv$residuals)
View(svm_output)
View(pred_q)
View(pred_table)
rmse(pred_table_sv$residuals)
rmse(pred_table$residuals)
View(pred_table_sv)
ggplot(airq, aes(x=temp, y=wind)) +
geom_point(size=airq$ozone / 10, color = abs(pred_table_sv$residuals))
ggplot(airq, aes(x=airq$Temp, y=airq$Wind)) +
geom_point(size=airq$ozone / 10, color = abs(pred_table_sv$residuals))
View(pred_table_sv)
ggplot(airq, aes(x=airq$Temp, y=airq$Wind)) +
geom_point(size=airq$ozone / 10, colour = abs(pred_table_sv$residuals))
pred_table_sv <- data.frame(pred_table_sv, airq$Temp, airq$Wind)
View(pred_table_sv)
ggplot(pred_table_sv, aes(x=airq.Temp, y=airq.Wind)) +
geom_point(size=Ozone / 10, colour = abs(pred_table_sv$residuals))
?lm
View(airq)
lm(formula = Ozone ~ ., data = airq)
olat <- lm(formula = Ozone ~ Temp, data = airq)
olaw <- lm(formula = Ozone ~ Wind, data = airq)
summary(olat)
summary(olaw)
lm_model <- lm(formula = Ozone ~ Temp + Wind, data = airq)
summary(lm_model)
View(lm_model)
ggplot(lm_model$model, aes(x=lm_model$model$Temp, y=lm_model$model$Wind)) +
geom_point(size=lm_model$model$Ozone / 10, colour = abs(lm_model$residuals))
good_ozone <- airq[which(airq$Ozone > mean(airq$Ozone))]
good_ozone <- airq[which(airq$Ozone >= mean(airq$Ozone)),]
View(good_ozone)
good_ozone <- which(airq$Ozone >= mean(airq$Ozone))
good_ozone <- which(airq$Ozone >= mean(airq$Ozone))
summary(good_ozone)
good_ozone <- which(airq$Ozone >= mean(airq$Ozone))
good_ozone
good_ozone <- airq$Ozone >= mean(airq$Ozone)
good_ozone
good_ozone <- as.numeric(airq$Ozone >= mean(airq$Ozone))
good_ozone
View(pred_table)
airq$good_ozone <- good_ozone
View(airq)
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 500000, cross = 3, prob.model = TRUE)
View(train_q)
train_q <- airq[rand_index[1:cut_2_3],]
pred_q <- airq[rand_index[(cut_2_3 + 1) : dim(airq)[1]], ]
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 500000, cross = 3, prob.model = TRUE)
svm_output
hist(alpha(svm_output)[[1]])
train_q <- airq[rand_index[1:cut_2_3],]
pred_q <- airq[rand_index[(cut_2_3 + 1) : dim(airq)[1]], ]
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 500000, cross = 3, prob.model = TRUE)
svm_output
View(svm_output)
train_q <- airq[rand_index[1:cut_2_3],]
pred_q <- airq[rand_index[(cut_2_3 + 1) : dim(airq)[1]], ]
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 50, cross = 3, prob.model = TRUE)
svm_output
train_q <- airq[rand_index[1:cut_2_3],]
pred_q <- airq[rand_index[(cut_2_3 + 1) : dim(airq)[1]], ]
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 500, cross = 3, prob.model = TRUE)
svm_output
train_q <- airq[rand_index[1:cut_2_3],]
pred_q <- airq[rand_index[(cut_2_3 + 1) : dim(airq)[1]], ]
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 5000, cross = 3, prob.model = TRUE)
svm_output
train_q <- airq[rand_index[1:cut_2_3],]
pred_q <- airq[rand_index[(cut_2_3 + 1) : dim(airq)[1]], ]
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 50000, cross = 3, prob.model = TRUE)
svm_output
train_q <- airq[rand_index[1:cut_2_3],]
pred_q <- airq[rand_index[(cut_2_3 + 1) : dim(airq)[1]], ]
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 5000, cross = 3, prob.model = TRUE)
svm_output
train_q <- airq[rand_index[1:cut_2_3],]
pred_q <- airq[rand_index[(cut_2_3 + 1) : dim(airq)[1]], ]
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 5000, cross = 3, prob.model = TRUE)
svm_output
train_q <- airq[rand_index[1:cut_2_3],]
pred_q <- airq[rand_index[(cut_2_3 + 1) : dim(airq)[1]], ]
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 5000, cross = 3, prob.model = TRUE)
svm_output
train_q <- airq[rand_index[1:cut_2_3],]
pred_q <- airq[rand_index[(cut_2_3 + 1) : dim(airq)[1]], ]
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 50000, cross = 3, prob.model = TRUE)
svm_output
train_q <- airq[rand_index[1:cut_2_3],]
pred_q <- airq[rand_index[(cut_2_3 + 1) : dim(airq)[1]], ]
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 500000, cross = 3, prob.model = TRUE)
svm_output
train_q <- airq[rand_index[1:cut_2_3],]
pred_q <- airq[rand_index[(cut_2_3 + 1) : dim(airq)[1]], ]
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 50, cross = 3, prob.model = TRUE)
svm_output
train_q <- airq[rand_index[1:cut_2_3],]
pred_q <- airq[rand_index[(cut_2_3 + 1) : dim(airq)[1]], ]
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 5, cross = 3, prob.model = TRUE)
svm_output
View(svm_output)
pred_table <- data.frame(airq[,1], svm_pred[,1])
table(pred_table)
View(pred_table)
svm_pred <- predict(svm_output, airq, type = "votes")
pred_table <- data.frame(airq[,1], svm_pred[,1])
table(pred_table)
View(pred_table)
View(svm_pred)
train_q <- airq[rand_index[1:cut_2_3],]
pred_q <- airq[rand_index[(cut_2_3 + 1) : dim(airq)[1]], ]
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 5, cross = 3, prob.model = TRUE)
svm_output
View(airq)
View(train_q)
View(pred_q)
?predict
svm_pred <- predict(svm_output, pred_q, type = "votes")
pred_table <- data.frame(airq[,1], svm_pred[,1])
table(pred_table)
View(pred_table)
View(airq)
svm_pred <- predict(svm_output, pred_q, type = "votes")
pred_table <- data.frame(airq[,7], svm_pred[,1])
table(pred_table)
View(pred_table)
svm_pred <- floor(predict(svm_output, pred_q, type = "votes"))
pred_table <- data.frame(airq[,7], svm_pred[,1])
table(pred_table)
View(pred_table)
View(pred_table)
svm_output <- ksvm(Ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 500000, cross = 3, prob.model = TRUE)
svm_output
hist(alpha(svm_output)[[1]])
svm_output <- ksvm(Ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 500000, cross = 3, prob.model = TRUE)
svm_output
svm_pred <- predict(svm_output, pred_q, type = "votes")
pred_table <- data.frame(airq[,1], svm_pred[,1])
table(pred_table)
train_q <- airq[rand_index[1:cut_2_3],]
pred_q <- airq[rand_index[(cut_2_3 + 1) : dim(airq)[1]], ]
svm_output <- ksvm(good_ozone ~ ., data = train_q, kernel = "rbfdot", kpar = "automatic", C = 5, cross = 3, prob.model = TRUE)
svm_output
svm_pred <- floor(predict(svm_output, pred_q, type = "votes"))
pred_table <- data.frame(airq[,7], svm_pred[,1])
table(pred_table)
View(pred_table)
svm_pred <- ceiling(predict(svm_output, pred_q, type = "votes"))
pred_table <- data.frame(airq[,7], svm_pred[,1])
table(pred_table)
View(pred_table)
svm_pred <- predict(svm_output, pred_q, type = "votes")
pred_table <- data.frame(airq[,7], as.numeric(svm_pred[,1] > 0))
table(pred_table)
View(pred_table)
View(pred_table)
View(pred_table)
View(pred_table)
pred_table$residuals <- as.numeric(pred_table$airq...7. == pred_table$as.numeric.svm_pred...1....0.)
View(pred_table)
display_df <- data.frame(airq$Temp, airq$Wind, airq$Ozone, pred_table$residuals)
View(display_df)
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$ozone / 10, color = abs(display_df$residuals))
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$ozone / 10, color = display_df$residuals)
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$ozone / 10, color = blue)
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$ozone / 10, color = "blue")
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$ozone / 10, color = display_df$residuals) +
scale_fill_manual(values = c("FALSE" = "red", "TRUE = "blue))
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$ozone / 10, color = display_df$residuals) +
scale_fill_manual(values = c("FALSE" = "red", "TRUE = "blue""))
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$ozone / 10, color = display_df$residuals) +
scale_fill_manual(values = c("FALSE" = "red", "TRUE = "blue"))
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$ozone / 10, color = display_df$residuals) +
scale_fill_manual(values = c("FALSE" = "red", "TRUE" = "blue"))
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$ozone / 10, color = display_df$residuals) +
scale_fill_manual(values = c(FALSE = "red", TRUE = "blue"))
View(pred_q)
View(pred_table)
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$ozone / 10, color = display_df$residuals)
row_n <- c("temp", "wind", "ozone", "residuals")
names(display_df) <- row_n
ggplot(display_df, aes(x=temp, y=wind)) +
geom_point(size=display_df$ozone / 10, color = display_df$residuals + 1)
vote_speech <- readLines("../vote_speech.txt")
head(vote_speech)
vote_speech <- readLines("../vote_speech.txt")
head(vote_speech)
install.packages("tm")
library(tm)
words_vec <- VectorSource(vote_speech)
words_corp <- Corpus(words_vec)
words_corp
words_corp <- tm_map(words_corp, content_transformer(toLower))
?tolower
words_corp <- tm_map(words_corp, content_transformer(toLower))
content_transformer()
?content_transformer
View(words_corp)
View(words_vec)
View(words_corp)
words_corp <- tm_map(words_corp, content_transformer(tolower))
words_corp <- tm_map(words_corp, removePunctuation)
words_corp <- tm_map(words_corp, removeNumbers)
words_corp <- tm_map(words_corp, removeWords, stopwords("english"))
tdm <- TermDocumentMatrix(words_corp)
tdm <- TermDocumentMatrix(words_corp)
tdm
inspect(tdm)
m <- as.matrix(tdm)
word_count <- rowSums(m)
word_count <- sort(word_count, decreasing = T)
head(word_count)
cloud_frame <- data.frame(word = names(word_count), freq = word_count)
View(cloud_frame)
wordcloud(cloud_frame$word, cloud_frame$freq)
?wordcloud
??wordcloud
install.packages("wordcloud")
library("wordcloud", lib.loc="/usr/local/lib/R/3.4/site-library")
wordcloud(cloud_frame$word, cloud_frame$freq)
wordcloud(names(word_count), word_count, min.freq = 2, rot.per = .35, max.words = 50, colors = brewer.pal(8, "dark2"))
wordcloud(names(word_count), word_count, min.freq = 2, rot.per = .35, max.words = 50, colors = brewer.pal(8, "Dark2"))
wordcloud(names(word_count), word_count, min.freq = 2, max.words = 50, colors = brewer.pal(8, "Dark2"))
pos <- readLines("../positive-words.txt")
neg <- readLines("../negative-words.txt")
head(pos, 10)
pos <- pos[-1:-34]
neg <- neg[-1:-34]
total_words <- sum(word_count)
words <- names(word_count)
match_words <- match(words, pos, nomatch = 0)
match_count <- word_count[which(matched_words != 0)]
match_words <- match(words, pos, nomatch = 0)
match_count <- word_count[which(match_words != 0)]
length(match_count)
match_pos_words <- names(match_count)
num_pos <- sum(match_pos_words)
match_pos_words <- names(match_count)
num_pos <- sum(match_count)
num_pos
match_words <- match(words, neg, nomatch = 0)
neg_count <- word_count[which(matched != 0)]
match_words <- match(words, neg, nomatch = 0)
neg_count <- word_count[which(match_words != 0)]
num_neg <- sum(neg_count)
match_neg_words <- names(neg_count)
num_neg
length(neg_count)
total_words <- length(words)
pos_ratio <- num_pos / total_words
neg_ratio <- neg_count / total_words
pos_ratio
neg_ratio
total_words <- length(words)
pos_ratio <- num_pos / total_words
neg_ratio <- num_neg / total_words
pos_ratio
neg_ratio
afinn <- readLines("../AFINN.txt")
afinn[2477]
afinn <- readLines("../AFINN.txt")
strsplit(afinn, split = "\t")
strsplit(afinn, split = "\t")[[1]]
strsplit(afinn, split = "\t")[1]
split <- strsplit(afinn, split = "\t")
View(split)
split[[1]]
split[[1]][1]
split[[1]][2]
split[[1]][2,]
split[[1]][,2]
split[1][2]
split[1][1]
split <- strsplit(afinn, split = "\t")[[1]]
rm
rm(split)
?gsub
str(afinn)
summary(afinn)
afinn <- as.vector(afinn)
str(afinn)
?readLines
?scan
split <- strsplit(afinn, "\t")
afinn_words <- sapply(split, function(x) {as.character(x[1])})
afinn_rates <- sapply(split, function(x) {as.numeric(x[2])})
afinn <- data.frame(words = afinn_words, rates = afinn_rates)
View(afinn)
rm(split)
vote_speech <- readLines("../vote_speech.txt")
head(vote_speech)
words_vec <- VectorSource(vote_speech)
words_corp <- Corpus(words_vec)
words_corp
words_corp <- tm_map(words_corp, content_transformer(tolower))
words_corp <- tm_map(words_corp, removePunctuation)
words_corp <- tm_map(words_corp, removeNumbers)
words_corp <- tm_map(words_corp, removeWords, stopwords("english"))
tdm <- TermDocumentMatrix(words_corp)
tdm
inspect(tdm)
m <- as.matrix(tdm)
word_count <- rowSums(m)
word_count <- sort(word_count, decreasing = T)
head(word_count)
cloud_frame <- data.frame(word = names(word_count), freq = word_count)
View(tdm)
View(tdm)
View(m)
View(cloud_frame)
View(afinn)
matched_words <- match(afinn$words, cloud_frame$word)
matched_words <- match(afinn$words, cloud_frame$word, nomatch = 0)
View(cloud_frame)
matched_words <- match(cloud_frame$word, afinn$words, nomatch = 0)
View(cloud_frame)
afinn[2324,]
head(matched_words, 20)
match_rows <- which(matched_words > 0)
match_rows <- which(matched_words > 0)
matched_words <- afinn[match_rows,]
View(matched_words)
View(cloud_frame)
View(cloud_frame)
sum(matched_words$rates)
sum(matched_words[,2])
View(matched_words)
sum(matched_words$rates)
sum(matched_words$rates)
mean(matched_words$rates)
sum(matched_words$rates)
mean(matched_words$rates)
median(matched_words$rates)
afinn_score_votes_text <- sum(matched_words$rates)
afinn_score_votes_text <- sum(matched_words$rates)
afinn_score_votes_text
View(words_vec)
View(words_corp)
View(cloud_frame)
vote_speech <- readLines("../vote_speech.txt")
head(vote_speech)
words_vec[[1]]
words_vec[[2]]
View(m)
View(words_corp)
words_corp[[1]]
words_corp[[1]]$content
words_corp[[c(1:7)]]$content
words_corp[[c(1:7)]]
words_corp[[c(1,7)]]
length(words_corp)
score_vote_total <- sum(matched_words$rates)
score_vote_total
vote_speech[1]
vote_speech[c(1:3)]
vote_speech[c(4:6)]
vote_speech[c(4:7)]
vote_speech[c(8:12)]
vote_speech[c(13:15)]
break_speech <- function(speech, vec) {
return(speech[vec])
}
break_speech(vote_speech, 1:3)
?table
afinn_speech_count <- function(speech, vec) {
words_vec <- VectorSource(speech[vec])
words_corp <- Corpus(words_vec)
words_corp <- tm_map(words_corp, content_transformer(tolower))
words_corp <- tm_map(words_corp, removePunctuation)
words_corp <- tm_map(words_corp, removeNumbers)
words_corp <- tm_map(words_corp, removeWords, stopwords("english"))
tdm <- TermDocumentMatrix(words_corp)
m <- as.matrix(tdm)
word_count <- rowSums(m)
word_count <- sort(word_count, decreasing = T)
cloud_frame <- data.frame(word = names(word_count), freq = word_count)
matched_words <- match(cloud_frame$word, afinn$words, nomatch = 0)
match_rows <- which(matched_words > 0)
matched_words <- afinn[match_rows,]
return(sum(matched_words$rates))
}
1_q <- afinn_speech_count(vote_speech, 1:3)
afinn_speech_count <- function(speech, vec) {
words_vec <- VectorSource(speech[vec])
words_corp <- Corpus(words_vec)
words_corp <- tm_map(words_corp, content_transformer(tolower))
words_corp <- tm_map(words_corp, removePunctuation)
words_corp <- tm_map(words_corp, removeNumbers)
words_corp <- tm_map(words_corp, removeWords, stopwords("english"))
tdm <- TermDocumentMatrix(words_corp)
m <- as.matrix(tdm)
word_count <- rowSums(m)
word_count <- sort(word_count, decreasing = T)
cloud_frame <- data.frame(word = names(word_count), freq = word_count)
matched_words <- match(cloud_frame$word, afinn$words, nomatch = 0)
match_rows <- which(matched_words > 0)
matched_words <- afinn[match_rows,]
return(sum(matched_words$rates))
}
speech_1_q <- afinn_speech_count(vote_speech, 1:3)
speech_2_q <- afinn_speech_count(vote_speech, 4:7)
speech_3_q <- afinn_speech_count(vote_speech, 8:12)
speech_4_q <- afinn_speech_count(vote_speech, 13:15)
plot_vec <- c(speech_1_q, speech_2_q, speech_3_q, speech_4_q)
barplot(plot_vec)
plot_vec <- c(speech_1_q, speech_2_q, speech_3_q, speech_4_q)
barplot(plot_vec, col = "darkgreen")
plot_vec <- c(speech_1_q, speech_2_q, speech_3_q, speech_4_q)
barplot(plot_vec, col = "darkred")
